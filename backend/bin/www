#!/usr/bin/env node

/**
 * Module dependencies.
 */

const http = require('http'); // Use the http module for HTTP server
const https = require('https'); // Use the https module for HTTPS server
const fs = require('fs'); // Require the 'fs' module for reading SSL certificate files
const app = require('../app');
const debug = require('debug')('backend:server');
const socket = require('../config/socket.js');
const mongoose = require('mongoose');
mongoose.set("strictQuery", false);
const { mongoURI: db } = require('../config/keys.js');


/**
 * Get port from environment and store in Express.
 */

// change the default port from 3000 to 5000:
const port = normalizePort(process.env.HTTP_PORT || '9090');
const httpsPort = normalizePort(process.env.HTTPS_PORT || '9443');
app.set('httpPort', port);
app.set('httpsPort', httpsPort);

/**
 * Create HTTP server.
 */

const privateKey = fs.readFileSync('/etc/nginx/sites-available/private.key', 'utf8'); // Replace with the path to your private key file
const certificate = fs.readFileSync('/etc/nginx/sites-available/certificate.pem', 'utf8'); // Replace with the path to your certificate file

const credentials = {
  key: privateKey,
  cert: certificate,
};


const server = http.createServer(app);
const httpsServer = https.createServer(credentials, app);


socket.init(httpsServer); // Initialize Socket.io on the HTTPS server

mongoose
  .connect(db, { useNewUrlParser: true })
  .then(() => {
    // Use `debug` instead of `dbLogger` if you did not split the debug 
    // console into `dbLogger` and `serverLogger` above. 
    server.listen(port);
    httpsServer.listen(httpsPort);
  }) 
  // Use `debug` instead of `serverLogger` if you did not split the debug 
  // console into `dbLogger` and `serverLogger` above.
/**
 * Listen on provided port, on all network interfaces.
 */

// listen for requests on the specified port:
// server.listen(port);
// failure callback when server has trouble starting:
server.on('error', onError);
// success callback when server starts:
server.on('listening', onListening);
httpsServer.on('listening', onListening);
/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var addrHttps = httpsServer.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
    var bindHttps = typeof addrHttps === 'string'
    ? 'pipe ' + addrHttps
    : 'port ' + addrHttps.port;
  debug('Listening on ' + bind);
  debug('HTTPS Listening on ' + bindHttps);
}